import 'dart:io';
import 'package:dio/dio.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:url_launcher/url_launcher.dart';
import '../database_service.dart';
import 'MedicalDocument.dart';

class MedicalDocumentService {
  final FirestoreService<MedicalDocument> _firestoreService;
  final SupabaseClient _supabase;

  MedicalDocumentService()
      : _firestoreService = FirestoreService<MedicalDocument>(
    collectionPath: 'medicalDocuments',
    fromJson: (json) => MedicalDocument.fromJson(json),
    toJson: (doc) => doc.toJson(),
  ),
        _supabase = Supabase.instance.client;

  // Upload a document to Supabase Storage and save metadata to Firestore
  Future<MedicalDocument> uploadDocument({
    required File file,
    String? type,
    required String healthcareProfessionalId,
    String? patientId,
    String? documentName,
  }) async {
    try {
      final extension = file.path.split('.').last.toLowerCase();
      final timestamp = DateTime.now().millisecondsSinceEpoch;

      // Generate filename
      final fileName = documentName != null
          ? '${documentName.replaceAll(' ', '_')}_$timestamp.$extension'
          : 'doc_${timestamp}_${healthcareProfessionalId}.$extension';

      final storagePath = 'medicalDocuments/$fileName';

      // 1. Upload to Supabase Storage
      await _supabase.storage
          .from('medical-files')
          .upload(storagePath, file);

      // 2. Get public URL
      final fileUrl = _supabase.storage
          .from('medical-files')
          .getPublicUrl(storagePath);

      // 3. Create Firestore record
      final document = MedicalDocument(
        id: '', // Will be generated by Firestore
        type: type ?? _detectFileType(extension),
        fileUrl: fileUrl,
        fileSize: await file.length(),
        uploadDate: DateTime.now(),
        healthcareProfessionalId: healthcareProfessionalId,
        patientId: patientId,
        documentName: documentName,
      );

      // 4. Save to Firestore and return with ID
      final docId = await _firestoreService.add(data: document);
      return document.copyWith(id: docId);

    } catch (e) {
      throw Exception('Failed to upload document: ${e.toString()}');
    }
  }

  String _detectFileType(String extension) {
    const imageTypes = ['jpg', 'jpeg', 'png', 'gif', 'bmp'];
    const docTypes = ['pdf', 'doc', 'docx', 'txt'];
    const videoTypes = ['mp4', 'mov', 'avi'];

    if (imageTypes.contains(extension)) return 'image';
    if (docTypes.contains(extension)) return 'document';
    if (videoTypes.contains(extension)) return 'video';
    return extension; // Return the extension as type if unknown
  }

  // Get download URL (just returns the stored URL for public bucket)
  Future<String> getDocumentUrl(String documentId) async {
    final document = await _firestoreService.get(documentId);
    if (document == null) throw Exception('Document not found');
    return document.fileUrl;
  }

  //Download and save to device (for mobile)
  Future<File> downloadDocumentToDevice(String documentId, String savePath) async {
    try {
      final url = await getDocumentUrl(documentId);

      // For Flutter apps, use the dio package (add to pubspec.yaml)
      final response = await Dio().get(
        url,
        options: Options(responseType: ResponseType.bytes),
      );

      final file = File(savePath);
      await file.writeAsBytes(response.data);
      return file;
    } catch (e) {
      throw Exception('Download failed: ${e.toString()}');
    }
  }


  // Get document metadata
  Future<MedicalDocument?> getDocument(String id) async {
    return await _firestoreService.get(id);
  }

  // Get all documents for a patient
  Future<List<MedicalDocument>> getPatientDocuments(String patientId) async {
    return await _firestoreService.queryField('patientId', patientId);
  }

  // Get all documents uploaded by a healthcare professional
  Future<List<MedicalDocument>> getHealthcareProfessionalDocuments(
      String professionalId) async {
    return await _firestoreService.queryField(
        'healthcareProfessionalId', professionalId);
  }

  // Delete document from both storage and Firestore
  Future<void> deleteDocument(String documentId) async {
    try {
      final document = await _firestoreService.get(documentId);
      if (document == null) throw Exception('Document not found');

      // Extract file path from URL
      final uri = Uri.parse(document.fileUrl);
      final filePath = uri.path.split('/public/medical-files/').last;

      // Delete from Supabase Storage
      await _supabase.storage
          .from('medical-files')
          .remove([filePath]);

      // Delete from Firestore
      await _firestoreService.delete(documentId);
    } catch (e) {
      throw Exception('Failed to delete document: ${e.toString()}');
    }
  }

  // Update document metadata (can't change the actual file)
  Future<void> updateDocument(MedicalDocument document) async {
    try {
      await _firestoreService.update(
          document.id, document, (doc) => doc.toJson());
    } catch (e) {
      throw Exception('Failed to update document: ${e.toString()}');
    }
  }
}