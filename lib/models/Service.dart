import 'HealthcareProfessional.dart';
import 'Specialty.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class Service {
  final String id;
  final String name;
  final String description;
  final double price;
  final Specialty? specialty;
  final HealthcareType healthcareType;
  final String? professionalId; 
  final String? requestedBy; // ID of the professional who requested the service
  final Timestamp? requestedAt; // When the service was requested
  final bool isApproved; // Whether the service has been approved by admin
  final String? approvedBy; // ID of admin who approved
  final Timestamp? approvedAt; // When the service was approved

  Service({
    required this.id,
    required this.name,
    required this.description,
    required this.price,
    this.specialty,
    required this.healthcareType,
    this.professionalId,
    this.requestedBy,
    this.requestedAt,
    this.isApproved = true, // Default to true for existing services
    this.approvedBy,
    this.approvedAt,
  }) : assert(
          healthcareType != HealthcareType.medecin || specialty != null,
          'Specialty must be provided for medecin services',
        );

  // For creating a new pending service
  factory Service.createPending({
    required String name,
    required String description,
    required double price,
    Specialty? specialty,
    required HealthcareType healthcareType,
    required String requestedBy,
  }) {
    return Service(
      id: '', // Will be generated by Firestore
      name: name,
      description: description,
      price: price,
      specialty: specialty,
      healthcareType: healthcareType,
      requestedBy: requestedBy,
      requestedAt: Timestamp.now(),
      isApproved: false,
    );
  }

  Service copyWith({
    String? id,
    String? name,
    String? description,
    double? price,
    Specialty? specialty,
    HealthcareType? healthcareType,
    String? requestedBy,
    Timestamp? requestedAt,
    bool? isApproved,
    String? approvedBy,
    Timestamp? approvedAt,
  }) {
    return Service(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      price: price ?? this.price,
      specialty: specialty ?? this.specialty,
      healthcareType: healthcareType ?? this.healthcareType,
      requestedBy: requestedBy ?? this.requestedBy,
      requestedAt: requestedAt ?? this.requestedAt,
      isApproved: isApproved ?? this.isApproved,
      approvedBy: approvedBy ?? this.approvedBy,
      approvedAt: approvedAt ?? this.approvedAt,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'price': price,
      'specialty': specialty?.name,
      'healthcareType': healthcareType.name,
      'requestedBy': requestedBy,
      'requestedAt': requestedAt,
      'isApproved': isApproved,
      'approvedBy': approvedBy,
      'approvedAt': approvedAt,
    };
  }

  factory Service.fromJson(Map<String, dynamic> json) {
    return Service(
      id: json['id'],
      name: json['name'],
      description: json['description'],
      price: json['price'] is int ? json['price'].toDouble() : json['price'],
      specialty: json['specialty'] != null
          ? Specialty.fromString(json['specialty'])
          : null,
      healthcareType: HealthcareType.values.firstWhere(
        (e) => e.name == json['healthcareType'],
        orElse: () => HealthcareType.medecin,
      ),
      requestedBy: json['requestedBy'],
      requestedAt: json['requestedAt'],
      isApproved: json['isApproved'] ?? true,
      approvedBy: json['approvedBy'],
      approvedAt: json['approvedAt'],
    );
  }

  factory Service.fromDocument(DocumentSnapshot doc) {
    return Service.fromJson(doc.data() as Map<String, dynamic>).copyWith(id: doc.id);
  }

  // Helper method to approve a service
  Service approve(String approvedByUserId) {
    return copyWith(
      isApproved: true,
      approvedBy: approvedByUserId,
      approvedAt: Timestamp.now(),
    );
  }

  @override
  String toString() {
    return 'Service(id: $id, name: $name, description: $description, price: $price, '
        'specialty: ${specialty?.name}, healthcareType: ${healthcareType.name}, '
        'status: ${isApproved ? 'Approved' : 'Pending'})';
  }
}